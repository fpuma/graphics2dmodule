#pragma once

#include <SDL.h>

namespace puma::nina
{
    using SDLInputMapping = std::map<s32, InputId>;
    constexpr std::initializer_list<puma::nina::SDLInputMapping::value_type> kSdlMouseMappingInitList = {
        {SDL_BUTTON_LEFT    , static_cast<InputId>( MouseButton::MB_LEFT           )},
        {SDL_BUTTON_MIDDLE  , static_cast<InputId>( MouseButton::MB_MIDDLE         )},
        {SDL_BUTTON_RIGHT   , static_cast<InputId>( MouseButton::MB_RIGHT          )},
        {SDL_BUTTON_X1      , static_cast<InputId>( MouseButton::MB_X1             )},
        {SDL_BUTTON_X2      , static_cast<InputId>( MouseButton::MB_X2             )},
    };

    constexpr std::initializer_list<puma::nina::SDLInputMapping::value_type> kSdlKeyboardMappingInitList = {
        {SDLK_RETURN        , static_cast<InputId>( KeyboardKey::KB_RETURN         )},
        {SDLK_ESCAPE        , static_cast<InputId>( KeyboardKey::KB_ESCAPE         )},
        {SDLK_BACKSPACE     , static_cast<InputId>( KeyboardKey::KB_BACKSPACE      )},
        {SDLK_TAB           , static_cast<InputId>( KeyboardKey::KB_TAB            )},
        {SDLK_SPACE         , static_cast<InputId>( KeyboardKey::KB_SPACE          )},
        {SDLK_EXCLAIM       , static_cast<InputId>( KeyboardKey::KB_EXCLAIM        )},
        {SDLK_QUOTEDBL      , static_cast<InputId>( KeyboardKey::KB_QUOTEDBL       )},
        {SDLK_HASH          , static_cast<InputId>( KeyboardKey::KB_HASH           )},
        {SDLK_PERCENT       , static_cast<InputId>( KeyboardKey::KB_PERCENT        )},
        {SDLK_DOLLAR        , static_cast<InputId>( KeyboardKey::KB_DOLLAR         )},
        {SDLK_AMPERSAND     , static_cast<InputId>( KeyboardKey::KB_AMPERSAND      )},
        {SDLK_QUOTE         , static_cast<InputId>( KeyboardKey::KB_QUOTE          )},
        {SDLK_LEFTPAREN     , static_cast<InputId>( KeyboardKey::KB_LEFTPAREN      )},
        {SDLK_RIGHTPAREN    , static_cast<InputId>( KeyboardKey::KB_RIGHTPAREN     )},
        {SDLK_ASTERISK      , static_cast<InputId>( KeyboardKey::KB_ASTERISK       )},
        {SDLK_PLUS          , static_cast<InputId>( KeyboardKey::KB_PLUS           )},
        {SDLK_COMMA         , static_cast<InputId>( KeyboardKey::KB_COMMA          )},
        {SDLK_MINUS         , static_cast<InputId>( KeyboardKey::KB_MINUS          )},
        {SDLK_PERIOD        , static_cast<InputId>( KeyboardKey::KB_PERIOD         )},
        {SDLK_SLASH         , static_cast<InputId>( KeyboardKey::KB_SLASH          )},
        {SDLK_0             , static_cast<InputId>( KeyboardKey::KB_0              )},
        {SDLK_1             , static_cast<InputId>( KeyboardKey::KB_1              )},
        {SDLK_2             , static_cast<InputId>( KeyboardKey::KB_2              )},
        {SDLK_3             , static_cast<InputId>( KeyboardKey::KB_3              )},
        {SDLK_4             , static_cast<InputId>( KeyboardKey::KB_4              )},
        {SDLK_5             , static_cast<InputId>( KeyboardKey::KB_5              )},
        {SDLK_6             , static_cast<InputId>( KeyboardKey::KB_6              )},
        {SDLK_7             , static_cast<InputId>( KeyboardKey::KB_7              )},
        {SDLK_8             , static_cast<InputId>( KeyboardKey::KB_8              )},
        {SDLK_9             , static_cast<InputId>( KeyboardKey::KB_9              )},
        {SDLK_COLON         , static_cast<InputId>( KeyboardKey::KB_COLON          )},
        {SDLK_SEMICOLON     , static_cast<InputId>( KeyboardKey::KB_SEMICOLON      )},
        {SDLK_LESS          , static_cast<InputId>( KeyboardKey::KB_LESS           )},
        {SDLK_EQUALS        , static_cast<InputId>( KeyboardKey::KB_EQUALS         )},
        {SDLK_GREATER       , static_cast<InputId>( KeyboardKey::KB_GREATER        )},
        {SDLK_QUESTION      , static_cast<InputId>( KeyboardKey::KB_QUESTION       )},
        {SDLK_AT            , static_cast<InputId>( KeyboardKey::KB_AT             )},
        {SDLK_LEFTBRACKET   , static_cast<InputId>( KeyboardKey::KB_LEFTBRACKET    )},
        {SDLK_BACKSLASH     , static_cast<InputId>( KeyboardKey::KB_BACKSLASH      )},
        {SDLK_RIGHTBRACKET  , static_cast<InputId>( KeyboardKey::KB_RIGHTBRACKET   )},
        {SDLK_CARET         , static_cast<InputId>( KeyboardKey::KB_CARET          )},
        {SDLK_UNDERSCORE    , static_cast<InputId>( KeyboardKey::KB_UNDERSCORE     )},
        {SDLK_BACKQUOTE     , static_cast<InputId>( KeyboardKey::KB_BACKQUOTE      )},
        {SDLK_a             , static_cast<InputId>( KeyboardKey::KB_A              )},
        {SDLK_b             , static_cast<InputId>( KeyboardKey::KB_B              )},
        {SDLK_c             , static_cast<InputId>( KeyboardKey::KB_C              )},
        {SDLK_d             , static_cast<InputId>( KeyboardKey::KB_D              )},
        {SDLK_e             , static_cast<InputId>( KeyboardKey::KB_E              )},
        {SDLK_f             , static_cast<InputId>( KeyboardKey::KB_F              )},
        {SDLK_g             , static_cast<InputId>( KeyboardKey::KB_G              )},
        {SDLK_h             , static_cast<InputId>( KeyboardKey::KB_H              )},
        {SDLK_i             , static_cast<InputId>( KeyboardKey::KB_I              )},
        {SDLK_j             , static_cast<InputId>( KeyboardKey::KB_J              )},
        {SDLK_k             , static_cast<InputId>( KeyboardKey::KB_K              )},
        {SDLK_l             , static_cast<InputId>( KeyboardKey::KB_L              )},
        {SDLK_m             , static_cast<InputId>( KeyboardKey::KB_M              )},
        {SDLK_n             , static_cast<InputId>( KeyboardKey::KB_N              )},
        {SDLK_o             , static_cast<InputId>( KeyboardKey::KB_O              )},
        {SDLK_p             , static_cast<InputId>( KeyboardKey::KB_P              )},
        {SDLK_q             , static_cast<InputId>( KeyboardKey::KB_Q              )},
        {SDLK_r             , static_cast<InputId>( KeyboardKey::KB_R              )},
        {SDLK_s             , static_cast<InputId>( KeyboardKey::KB_S              )},
        {SDLK_t             , static_cast<InputId>( KeyboardKey::KB_T              )},
        {SDLK_u             , static_cast<InputId>( KeyboardKey::KB_U              )},
        {SDLK_v             , static_cast<InputId>( KeyboardKey::KB_V              )},
        {SDLK_w             , static_cast<InputId>( KeyboardKey::KB_W              )},
        {SDLK_x             , static_cast<InputId>( KeyboardKey::KB_X              )},
        {SDLK_y             , static_cast<InputId>( KeyboardKey::KB_Y              )},
        {SDLK_z             , static_cast<InputId>( KeyboardKey::KB_Z              )},
        {SDLK_CAPSLOCK      , static_cast<InputId>( KeyboardKey::KB_CAPSLOCK       )},
        {SDLK_F1            , static_cast<InputId>( KeyboardKey::KB_F1             )},
        {SDLK_F2            , static_cast<InputId>( KeyboardKey::KB_F2             )},
        {SDLK_F3            , static_cast<InputId>( KeyboardKey::KB_F3             )},
        {SDLK_F4            , static_cast<InputId>( KeyboardKey::KB_F4             )},
        {SDLK_F5            , static_cast<InputId>( KeyboardKey::KB_F5             )},
        {SDLK_F6            , static_cast<InputId>( KeyboardKey::KB_F6             )},
        {SDLK_F7            , static_cast<InputId>( KeyboardKey::KB_F7             )},
        {SDLK_F8            , static_cast<InputId>( KeyboardKey::KB_F8             )},
        {SDLK_F9            , static_cast<InputId>( KeyboardKey::KB_F9             )},
        {SDLK_F10           , static_cast<InputId>( KeyboardKey::KB_F10            )},
        {SDLK_F11           , static_cast<InputId>( KeyboardKey::KB_F11            )},
        {SDLK_F12           , static_cast<InputId>( KeyboardKey::KB_F12            )},
        {SDLK_PRINTSCREEN   , static_cast<InputId>( KeyboardKey::KB_PRINTSCREEN    )},
        {SDLK_SCROLLLOCK    , static_cast<InputId>( KeyboardKey::KB_SCROLLLOCK     )},
        {SDLK_PAUSE         , static_cast<InputId>( KeyboardKey::KB_PAUSE          )},
        {SDLK_INSERT        , static_cast<InputId>( KeyboardKey::KB_INSERT         )},
        {SDLK_HOME          , static_cast<InputId>( KeyboardKey::KB_HOME           )},
        {SDLK_PAGEUP        , static_cast<InputId>( KeyboardKey::KB_PAGEUP         )},
        {SDLK_DELETE        , static_cast<InputId>( KeyboardKey::KB_DELETE         )},
        {SDLK_END           , static_cast<InputId>( KeyboardKey::KB_END            )},
        {SDLK_PAGEDOWN      , static_cast<InputId>( KeyboardKey::KB_PAGEDOWN       )},
        {SDLK_RIGHT         , static_cast<InputId>( KeyboardKey::KB_RIGHT          )},
        {SDLK_LEFT          , static_cast<InputId>( KeyboardKey::KB_LEFT           )},
        {SDLK_DOWN          , static_cast<InputId>( KeyboardKey::KB_DOWN           )},
        {SDLK_UP            , static_cast<InputId>( KeyboardKey::KB_UP             )},
        {SDLK_NUMLOCKCLEAR  , static_cast<InputId>( KeyboardKey::KB_NUMLOCKCLEAR   )},
        {SDLK_KP_DIVIDE     , static_cast<InputId>( KeyboardKey::KB_NUM_DIVIDE     )},
        {SDLK_KP_MULTIPLY   , static_cast<InputId>( KeyboardKey::KB_NUM_MULTIPLY   )},
        {SDLK_KP_MINUS      , static_cast<InputId>( KeyboardKey::KB_NUM_MINUS      )},
        {SDLK_KP_PLUS       , static_cast<InputId>( KeyboardKey::KB_NUM_PLUS       )},
        {SDLK_KP_ENTER      , static_cast<InputId>( KeyboardKey::KB_NUM_ENTER      )},
        {SDLK_KP_1          , static_cast<InputId>( KeyboardKey::KB_NUM_1          )},
        {SDLK_KP_2          , static_cast<InputId>( KeyboardKey::KB_NUM_2          )},
        {SDLK_KP_3          , static_cast<InputId>( KeyboardKey::KB_NUM_3          )},
        {SDLK_KP_4          , static_cast<InputId>( KeyboardKey::KB_NUM_4          )},
        {SDLK_KP_5          , static_cast<InputId>( KeyboardKey::KB_NUM_5          )},
        {SDLK_KP_6          , static_cast<InputId>( KeyboardKey::KB_NUM_6          )},
        {SDLK_KP_7          , static_cast<InputId>( KeyboardKey::KB_NUM_7          )},
        {SDLK_KP_8          , static_cast<InputId>( KeyboardKey::KB_NUM_8          )},
        {SDLK_KP_9          , static_cast<InputId>( KeyboardKey::KB_NUM_9          )},
        {SDLK_KP_0          , static_cast<InputId>( KeyboardKey::KB_NUM_0          )},
        {SDLK_KP_PERIOD     , static_cast<InputId>( KeyboardKey::KB_NUM_PERIOD     )},
        {SDLK_APPLICATION   , static_cast<InputId>( KeyboardKey::KB_APPLICATION    )},
        {SDLK_LCTRL         , static_cast<InputId>( KeyboardKey::KB_LCTRL          )},
        {SDLK_LSHIFT        , static_cast<InputId>( KeyboardKey::KB_LSHIFT         )},
        {SDLK_LALT          , static_cast<InputId>( KeyboardKey::KB_LALT           )},
        {SDLK_LGUI          , static_cast<InputId>( KeyboardKey::KB_LGUI           )},
        {SDLK_RCTRL         , static_cast<InputId>( KeyboardKey::KB_RCTRL          )},
        {SDLK_RSHIFT        , static_cast<InputId>( KeyboardKey::KB_RSHIFT         )},
        {SDLK_RALT          , static_cast<InputId>( KeyboardKey::KB_RALT           )},
        {SDLK_RGUI          , static_cast<InputId>( KeyboardKey::KB_RGUI           )},
    };

#define PUMA_SDL_JOY_A      0 << 4
#define PUMA_SDL_JOY_B      1 << 4
#define PUMA_SDL_JOY_X      2 << 4
#define PUMA_SDL_JOY_Y      3 << 4
#define PUMA_SDL_JOY_LB     4 << 4
#define PUMA_SDL_JOY_RB     5 << 4
#define PUMA_SDL_JOY_SELECT 6 << 4
#define PUMA_SDL_JOY_START  7 << 4
#define PUMA_SDL_JOY_LSTICK 8 << 4
#define PUMA_SDL_JOY_RSTICK 9 << 4
#define SDL_TO_PUMA(X) X << 4

    constexpr std::initializer_list<puma::nina::SDLInputMapping::value_type> kSdlControllerMappingInitList = {
        {SDL_HAT_UP          , static_cast<InputId>(ControllerButton::CB_DPAD_UP)},
        {SDL_HAT_RIGHT       , static_cast<InputId>(ControllerButton::CB_DPAD_RIGHT)},
        {SDL_HAT_DOWN        , static_cast<InputId>(ControllerButton::CB_DPAD_DOWN)},
        {SDL_HAT_LEFT        , static_cast<InputId>(ControllerButton::CB_DPAD_LEFT)},
        {PUMA_SDL_JOY_A      , static_cast<InputId>(ControllerButton::CB_A)},
        {PUMA_SDL_JOY_B      , static_cast<InputId>(ControllerButton::CB_B)},
        {PUMA_SDL_JOY_X      , static_cast<InputId>(ControllerButton::CB_X)},
        {PUMA_SDL_JOY_Y      , static_cast<InputId>(ControllerButton::CB_Y)},
        {PUMA_SDL_JOY_LB     , static_cast<InputId>(ControllerButton::CB_LB)},
        {PUMA_SDL_JOY_RB     , static_cast<InputId>(ControllerButton::CB_RB)},
        {PUMA_SDL_JOY_SELECT , static_cast<InputId>(ControllerButton::CB_SELECT)},
        {PUMA_SDL_JOY_START  , static_cast<InputId>(ControllerButton::CB_START)},
        {PUMA_SDL_JOY_LSTICK , static_cast<InputId>(ControllerButton::CB_LSTICK)},
        {PUMA_SDL_JOY_RSTICK , static_cast<InputId>(ControllerButton::CB_RSTICK)},
    };

    const SDLInputMapping kSdlMouseMapping = kSdlMouseMappingInitList;
    const SDLInputMapping kSdlKeyboardMapping = kSdlKeyboardMappingInitList;
    const SDLInputMapping kSdlControllerMapping = kSdlControllerMappingInitList;

}